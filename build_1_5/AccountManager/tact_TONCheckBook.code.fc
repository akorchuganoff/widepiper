#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_TONCheckBook.headers.fc";
#include "tact_TONCheckBook.stdlib.fc";
#include "tact_TONCheckBook.constants.fc";
#include "tact_TONCheckBook.storage.fc";

;;
;; Contract TONCheckBook functions
;;

(slice, slice) $TONCheckBook$_contract_init(slice $accountManager, slice $owner) impure inline_ref {
    var (($self'accountManager, $self'owner)) = (null(), null());
    $self'accountManager = $accountManager;
    $self'owner = $owner;
    return ($self'accountManager, $self'owner);
}

((slice, slice), int) $TONCheckBook$_fun_Balance((slice, slice) $self) impure inline_ref {
    var (($self'accountManager, $self'owner)) = $self;
    return (($self'accountManager, $self'owner), __tact_my_balance());
}

((slice, slice), ()) $TONCheckBook$_fun_requireOwner((slice, slice) $self) impure inline_ref {
    var (($self'accountManager, $self'owner)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'accountManager, $self'owner), ());
}

((slice, slice), slice) $TONCheckBook$_fun_owner((slice, slice) $self) impure inline_ref {
    var (($self'accountManager, $self'owner)) = $self;
    return (($self'accountManager, $self'owner), $self'owner);
}

;;
;; Receivers of a Contract TONCheckBook
;;

(((slice, slice)), ()) %$TONCheckBook$_internal_empty((slice, slice) $self) impure inline {
    var ($self'accountManager, $self'owner) = $self;
    return (($self'accountManager, $self'owner), ());
}

(((slice, slice)), ()) $TONCheckBook$_internal_binary_Withdraw((slice, slice) $self, (int) $msg) impure inline {
    var ($self'accountManager, $self'owner) = $self;
    var ($msg'amount) = $msg;
    ($self'accountManager, $self'owner)~$TONCheckBook$_fun_requireOwner();
    throw_unless(15518, (__tact_my_balance() > 30000000));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body(__tact_context_get_sender(), min((__tact_my_balance() - 30000000), $msg'amount), (64 + 2), true, __gen_cell_comment_6d3544d9f93ca265d1287c9306cff170856e42f7497c7247669bae97d1d16fd2()));
    return (($self'accountManager, $self'owner), ());
}

(((slice, slice)), ()) $TONCheckBook$_internal_binary_ApplyBetMessage((slice, slice) $self, (slice, slice, int, int, int, int, int) $msg) impure inline {
    var ($self'accountManager, $self'owner) = $self;
    var ($msg'account_manager, $msg'owner, $msg'bet_amount, $msg'delta_r, $msg'seqno, $msg'odd_flag, $msg'is_negative) = $msg;
    throw_unless(61019, (__tact_my_balance() > ($msg'bet_amount + 30000000)));
    var ($new_bet_init'code, $new_bet_init'data) = $Bet$_init_child(__tact_context_sys, $msg'account_manager, $msg'seqno, $msg'odd_flag);
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_data_code($global_contractAddress(($new_bet_init'code, $new_bet_init'data)), ($msg'bet_amount + 30000000), 2, true, $SetBetInfo$_store_cell($SetBetInfo$_constructor_owner_ton_check_book_delta_r_balance_is_negative($msg'owner, my_address(), $msg'delta_r, $msg'bet_amount, $msg'is_negative)), $new_bet_init'data, $new_bet_init'code));
    $global_send($SendParameters$_constructor_to_value_mode_bounce(__tact_context_get_sender(), 0, (128 + 2), true));
    return (($self'accountManager, $self'owner), ());
}

(((slice, slice)), ()) $TONCheckBook$_receive_binary_bounce_Withdraw((slice, slice) $self, (int) $msg) impure inline {
    var ($self'accountManager, $self'owner) = $self;
    var ($msg'amount) = $msg;
    return (($self'accountManager, $self'owner), ());
}

(((slice, slice)), ()) $TONCheckBook$_internal_binary_Deploy((slice, slice) $self, (int) $deploy) impure inline {
    var ($self'accountManager, $self'owner) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'accountManager, $self'owner)~$TONCheckBook$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'accountManager, $self'owner), ());
}

;;
;; Get methods of a Contract TONCheckBook
;;

_ %Balance() method_id(129078) {
    var self = $TONCheckBook$_contract_load();
    var res = self~$TONCheckBook$_fun_Balance();
    return res;
}

_ %owner() method_id(83229) {
    var self = $TONCheckBook$_contract_load();
    var res = self~$TONCheckBook$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmY1PY6QzjdtVp4WSFob81jg9qzDug8AwTx8RTVVnREMTk";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TONCheckBook
;;

((slice, slice), int) $TONCheckBook$_contract_router_internal((slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Parse op
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg.preload_uint(32);
        }
        
        ;; Bounced handler for Withdraw message
        if (op == 195467089) {
            var msg = in_msg~$Withdraw$_load();
            self~$TONCheckBook$_receive_binary_bounce_Withdraw(msg);
            return (self, true);
        }
        
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$TONCheckBook$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Withdraw message
    if (op == 195467089) {
        var msg = in_msg~$Withdraw$_load();
        self~$TONCheckBook$_internal_binary_Withdraw(msg);
        return (self, true);
    }
    
    ;; Receive ApplyBetMessage message
    if (op == 4260982606) {
        var msg = in_msg~$ApplyBetMessage$_load();
        self~$TONCheckBook$_internal_binary_ApplyBetMessage(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$TONCheckBook$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TONCheckBook$_contract_load();
    
    ;; Handle operation
    int handled = self~$TONCheckBook$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TONCheckBook$_contract_store(self);
}
